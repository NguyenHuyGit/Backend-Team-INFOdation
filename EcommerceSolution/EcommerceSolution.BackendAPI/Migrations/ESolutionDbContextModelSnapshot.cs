// <auto-generated />
using System;
using EcommerceSolution.BackendAPI.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommerceSolution.BackendAPI.Migrations
{
    [DbContext(typeof(ESolutionDbContext))]
    partial class ESolutionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DELL"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ASUS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ACER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HP"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SAMSUNG"
                        },
                        new
                        {
                            Id = 6,
                            Name = "APPLE"
                        });
                });

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Name = "Phụ kiện Laptop"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 6,
                            Name = "Phụ kiện Ipad"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 6,
                            Name = "Ipad"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 1,
                            Name = "Máy tính"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            Name = "Điện thoại"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 6,
                            Name = "Iphone"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 3,
                            Name = "Laptop gaming"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 2,
                            Name = "Laptop gaming"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 4,
                            Name = "Máy tính"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 1,
                            Name = "Máy in"
                        });
                });

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCreate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            CreateDate = new DateTime(2022, 4, 25, 19, 48, 9, 862, DateTimeKind.Local).AddTicks(2179),
                            Description = "Laptop văn phòng",
                            Name = "Vostro 3578",
                            Quantity = 3,
                            Status = 0,
                            UserCreate = "Liêm"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            CreateDate = new DateTime(2022, 4, 25, 19, 48, 9, 863, DateTimeKind.Local).AddTicks(1168),
                            Description = "Điện thoại thời thượng",
                            Name = "Galaxy A52s",
                            Quantity = 5,
                            Status = 0,
                            UserCreate = "Liêm"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreateDate = new DateTime(2022, 4, 25, 19, 48, 9, 863, DateTimeKind.Local).AddTicks(1203),
                            Description = "Sạc 100W",
                            Name = "Củ sạc laptop M01",
                            Quantity = 10,
                            Status = 0,
                            UserCreate = "Liêm"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 7,
                            CreateDate = new DateTime(2022, 4, 25, 19, 48, 9, 863, DateTimeKind.Local).AddTicks(1206),
                            Description = "Điện thoại cao cấp",
                            Name = "Iphone 13 Pro Max",
                            Quantity = 5,
                            Status = 0,
                            UserCreate = "Liêm"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 9,
                            CreateDate = new DateTime(2022, 4, 25, 19, 48, 9, 863, DateTimeKind.Local).AddTicks(1208),
                            Description = "Laptop gaming mạnh mẽ",
                            Name = "TUF Gaming 22KW",
                            Quantity = 2,
                            Status = 0,
                            UserCreate = "Liêm"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            CreateDate = new DateTime(2022, 4, 25, 19, 48, 9, 863, DateTimeKind.Local).AddTicks(1210),
                            Description = "Laptop văn phòng mạnh mẽ",
                            Name = "Vostro 7799",
                            Quantity = 2,
                            Status = 0,
                            UserCreate = "Liêm"
                        });
                });

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3686be03-7a0d-4895-b316-7dbba283b45d",
                            Email = "backendteam@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hung",
                            LastName = "Nguyen",
                            LockoutEnabled = false,
                            NormalizedEmail = "backendteam@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEO2hdo1R12uTOl+S+wcCW1FmoSeh7jSGvvi2f+ERkoHDAmrLivv0SSfegKcMrHhepw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("cdf5c8fb-b7c0-455c-8134-94ef0cf92717"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e68d44e7-ffb1-4b40-8a95-88aba30362e1",
                            Email = "backend@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Liem",
                            LastName = "Nguyen",
                            LockoutEnabled = false,
                            NormalizedEmail = "backend@gmail.com",
                            NormalizedUserName = "liemnv",
                            PasswordHash = "AQAAAAEAACcQAAAAEMmhtvLeFf4LAPw5HB70K/LApkaBajsUxCrUCKuBzrSg0OxPXcD4Al1CGwp7klvunQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "liemnv"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.Category", b =>
                {
                    b.HasOne("EcommerceSolution.BackendAPI.Data.Entities.Brand", "Brand")
                        .WithMany("Categories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceSolution.BackendAPI.Data.Entities.Product", b =>
                {
                    b.HasOne("EcommerceSolution.BackendAPI.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
